{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","isInvalid","setIsInvalid","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","count","setCount","isInvalidImg","setIsInvalidImg","isInvalidImdb","setIsInvalidImdb","pattern","isAllEntered","onSubmit","preventDefault","test","newFilm","disabled","App","moviesFromServer","newMovies","setNewMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.721006bf.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  name: string,\n  value: string,\n  isInvalid?: boolean,\n  setIsInvalid?: (newValue: boolean) => void,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  isInvalid,\n  setIsInvalid,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isInvalid && setIsInvalid) {\n      setIsInvalid(false);\n    }\n\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleOnChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {isInvalid && (\n        <p className=\"help is-danger\">Invalid data</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [count, setCount] = useState(0);\n  const [isInvalidImg, setIsInvalidImg] = useState(false);\n  const [isInvalidImdb, setIsInvalidImdb] = useState(false);\n\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const hendleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!pattern.test(imgUrl)) {\n      setIsInvalidImg(true);\n\n      return;\n    }\n\n    if (!pattern.test(imdbUrl)) {\n      setIsInvalidImdb(true);\n\n      return;\n    }\n\n    const newFilm = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    onAdd(newFilm);\n\n    setCount(count + 1);\n  };\n\n  const isAllEntered = (\n    title && imgUrl && imdbUrl && imdbId\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={hendleSubmit}\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        isInvalid={isInvalidImg}\n        setIsInvalid={setIsInvalidImg}\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        isInvalid={isInvalidImdb}\n        setIsInvalid={setIsInvalidImdb}\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAllEntered}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMovies, setNewMovies] = useState(moviesFromServer);\n\n  const hendleAddNewFilm = (movie: Movie) => {\n    setNewMovies([...newMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={hendleAddNewFilm} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}